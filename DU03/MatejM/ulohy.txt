
package main

import "golang.org/x/tour/pic"

func Pic(dx, dy int) [][]uint8 {
	vysl := make([][]uint8,dy)
	
	for i:=0;i<dy;i++{
		v:=make([]uint8,dx)
		for j:=0;j<dx;j++{
			v[j]=uint8(i*j/2)
		}
		vysl[i]=v
	}
	return vysl

}

func main() {
	pic.Show(Pic)
}


func WordCount(s string) map[string]int {
	vysl := make(map[string]int)
	pole := strings.Split(s, " ")
	for i := 0; i < len(pole); i++ {
		v, ok := vysl[pole[i]]
		if ok {
			vysl[pole[i]] = (v + 1)
		} else {
			vysl[pole[i]] = 1
		}
	}
	return vysl
}

func main() {
	wc.Test(WordCount)
}

package main

import "fmt"

// fibonacci is a function that returns
// a function that returns an int.
func fibonacci() func() int {
	a := 0
	b := 1
	return func() int {
		vysl := a
		a = b
		b = b + vysl
		return vysl
	}
}

func main() {
	f := fibonacci()
	for i := 0; i < 10; i++ {
		fmt.Println(f())
	}
}


package main

import "fmt"

type IPAddr [4]byte

// TODO: Add a "String() string" method to IPAddr.

func (p IPAddr) String() string {
	return fmt.Sprintf("%d.%d.%d.%d", p[0], p[1], p[2], p[3])
}

func main() {
	hosts := map[string]IPAddr{
		"loopback":  {127, 0, 0, 1},
		"googleDNS": {8, 8, 8, 8},
	}
	for name, ip := range hosts {
		fmt.Printf("%v: %v\n", name, ip)
	}
}
package main

import (
	"fmt"
	"math"
)

type ErrNegativeSqrt  struct {
	What string
	n    float64
}

func (e *ErrNegativeSqrt ) Error() string {
	return fmt.Sprintf("%s %f",
		e.What, e.n)
}

func Sqrt(x float64) (float64, error) {
	z := x / 2
	if x < 0 {
		return x, &ErrNegativeSqrt {
			"nemohu provést Sqrt na záporném čísle:",
			x,
		}
	}
	for i := 0; ; i++ {
		z2 := z
		z -= (z*z - x) / (2 * z)
		if math.Abs(z2-z) < 0.00000001 {
			fmt.Print("i=", i, ": ")
			return z, nil
		}
	}

	return z, nil
}
func main() {
	fmt.Println(Sqrt(2))
	fmt.Println(Sqrt(-2))
}

package main

import "golang.org/x/tour/reader"

type MyReader struct{}

// TODO: Add a Read([]byte) (int, error) method to MyReader.
func (MyReader) Read(b []byte) (n int, err error){
	
	for i:= 0 ;i<len(b);i++{
		b[i] = 'A' // 65
	}
	return 1, nil




}

func main() {
	reader.Validate(MyReader{})
}

package main
//https://github.com/golang/tour/blob/master/solutions/rot13.go
import (
    "io"
    "os"
    "strings"
)

type rot13Reader struct {
    r io.Reader
}

func rot13(x byte) byte {
    switch {
    case x >= 65 && x <= 77:
        fallthrough
    case x >= 97 && x <= 109:
        x = x + 13
    case x >= 78 && x <= 90:
        fallthrough
    case x >= 110 && x <= 122:
        x = x - 13
    }
    return x
}

func (r13 *rot13Reader) Read(b []byte) (int, error) {
    n, err := r13.r.Read(b)
    for i := 0; i <= n; i++ {
        b[i] = rot13(b[i])
    }
    return n, err
}

func main() {
    s := strings.NewReader("Lbh penpxrq gur pbqr!")
    r := rot13Reader{s}
    io.Copy(os.Stdout, &r)
}
package main//https://github.com/golang/tour/blob/master/solutions/image.go
import (
	"image"
	"image/color"
	"golang.org/x/tour/pic"
)
type Image struct {
	Height, Width int
}
func (m Image) ColorModel() color.Model {
	return color.RGBAModel
}
func (m Image) Bounds() image.Rectangle {
	return image.Rect(0, 0, m.Height, m.Width)
}
func (m Image) At(x, y int) color.Color {
	c := uint8(x * y/2+3)
	d:= uint8(x^y+6) 
	return color.RGBA{d, d-c, c, 255}
}
func main() {
	m := Image{256, 256}
	pic.ShowImage(m)
}
package m//https://github.com/golang/tour/blob/master/solutions/binarytrees_quit.go
import (
	"fmt"
	"golang.org/x/tour/tree"
)
func walkImpl(t *tree.Tree, ch, quit chan int) {
	if t == nil {
		return
	}
	walkImpl(t.Left, ch, quit)
	select {
	case ch <- t.Value:
		// Value successfully sent.
	case <-quit:
		return
	}
	walkImpl(t.Right, ch, quit)
}
// Walk walks the tree t sending all values
// from the tree to the channel ch.
func Walk(t *tree.Tree, ch, quit chan int) {
	walkImpl(t, ch, quit)
	close(ch)
}
// Same determines whether the trees
// t1 and t2 contain the same values.
func Same(t1, t2 *tree.Tree) bool {
	w1, w2 := make(chan int), make(chan int)
	quit := make(chan int)
	defer close(quit)
	go Walk(t1, w1, quit)
	go Walk(t2, w2, quit)
	for {
		v1, ok1 := <-w1
		v2, ok2 := <-w2
		if !ok1 || !ok2 {
			return ok1 == ok2
		}
		if v1 != v2 {
			return false
		}
	}
}
func main() {
	fmt.Print("tree.New(1) == tree.New(1): ")
	if Same(tree.New(1), tree.New(1)) {
		fmt.Println("PASSED")
	} else {
		fmt.Println("FAILED")
	}
	fmt.Print("tree.New(1) != tree.New(2): ")
	if !Same(tree.New(1), tree.New(2)) {
		fmt.Println("PASSED")
	} else {
		fmt.Println("FAILED")
	}
}
package main//https://github.com/fgrehm/go-tour/blob/master/73-web-crawler-golang-team-solution.go
import (
	"errors"
	"fmt"
	"sync")
type Fetcher interface {
	Fetch(url string) (body string, urls []string, err error)
}
var fetched = struct {
	m map[string]error
	sync.Mutex
}{m: make(map[string]error)}
var loading = errors.New("url load in progress") // sentinel value
func Crawl(url string, depth int, fetcher Fetcher) {
	if depth <= 0 {
		fmt.Printf("<- Done with %v, depth 0.\n", url)
		return
	}
	fetched.Lock()
	if _, ok := fetched.m[url]; ok {
		fetched.Unlock()
		fmt.Printf("<- Done with %v, already fetched.\n", url)
		return
	}
	fetched.m[url] = loading
	fetched.Unlock()
	body, urls, err := fetcher.Fetch(url)
	fetched.Lock()
	fetched.m[url] = err
	fetched.Unlock()
	if err != nil {
		fmt.Printf("<- Error on %v: %v\n", url, err)
		return
	}
	fmt.Printf("Found: %s %q\n", url, body)
	done := make(chan bool)
	for i, u := range urls {
		fmt.Printf("-> Crawling child %v/%v of %v : %v.\n", i, len(urls), url, u)
		go func(url string) {
			Crawl(url, depth-1, fetcher)
			done <- true
		}(u)
	}
	for i := range urls {
		fmt.Printf("<- [%v] %v/%v Waiting for child %v.\n", url, i, len(urls))
		<-done
	}
	fmt.Printf("<- Done with %v\n", url)
}
func main() {
	Crawl("http://golang.org/", 4, fetcher)
	fmt.Println("Fetching stats\n--------------")
	for url, err := range fetched.m {
		if err != nil {
			fmt.Printf("%v failed: %v\n", url, err)
		} else {
			fmt.Printf("%v was fetched\n", url)
		}
	}
}
type fakeFetcher map[string]*fakeResult
type fakeResult struct {
	body string
	urls []string
}
func (f *fakeFetcher) Fetch(url string) (string, []string, error) {
	if res, ok := (*f)[url]; ok {
		return res.body, res.urls, nil
	}
	return "", nil, fmt.Errorf("not found: %s", url)
}
var fetcher = &fakeFetcher{
	"http://golang.org/": &fakeResult{
		"The Go Programming Language",
		[]string{	"http://golang.org/pkg/",	"http://golang.org/cmd/",	},	},
	"http://golang.org/pkg/": &fakeResult{
		"Packages",
		[]string{		"http://golang.org/",			"http://golang.org/cmd/",     "http://golang.org/pkg/fmt/",
			"http://golang.org/pkg/os/",	},	},
	"http://golang.org/pkg/fmt/": &fakeResult{
		"Package fmt",
		[]string{	"http://golang.org/",	"http://golang.org/pkg/",
		},},
	"http://golang.org/pkg/os/": &fakeResult{
		"Package os",[]string{
			"http://golang.org/",
			"http://golang.org/pkg/",},},}

