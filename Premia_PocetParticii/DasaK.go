//The Man Who Knew Infinity
package main

import (
	"fmt"
	"math"
	"math/big"
	"time"
)

var mapa = map[int]*big.Int{0: big.NewInt(1), 1: big.NewInt(1)}

func to1(n int) int {
	return int(math.Floor((1 + math.Sqrt(float64(1+24*n))) / 6))
}

func to2(n int) int {
	return int(math.Floor((-1 + math.Sqrt(float64(1+24*n))) / 6))
}

//http://oeis.org/wiki/Partition_function
func partitions(n int) *big.Int {
	if n < 0 {
		return big.NewInt(0)
	}
	if e, ok := mapa[n]; ok {
		return e
	}
	out1 := big.NewInt(0)
	for i := 1; i <= to1(n); i += 1 {
		x := big.NewInt(int64(math.Pow(float64(-1), float64(i-1))))
		y := partitions(int(n - i*(3*i-1)/2))
		x = x.Mul(x, y)
		out1.Add(out1, x)
	}
	out2 := big.NewInt(0)
	for i := 1; i <= to2(n); i += 1 {
		x := big.NewInt(int64(math.Pow(float64(-1), float64(i-1))))
		y := partitions(int(n - i*(3*i+1)/2))
		x = x.Mul(x, y)
		out2.Add(out2, x)
	}
	out1.Add(out1, out2)
	mapa[n] = out1
	return out1
}

func main() {
	for _, i := range []int{7, 1000, 10000, 100000, 1000000, 10000000} {
		start := time.Now()
		a := partitions(i)
		end := time.Since(start)
		fmt.Printf("number of partitions of %d is: %d", i, a)
		fmt.Printf(",\ntime: %s, length: %d\n", end, len(a.String()))

	}
	// number of partitions of 7 is: 15,
	// time: 0s, length: 2
	// number of partitions of 1000 is: 24061467864032622473692149727991,
	// time: 7.9782ms, length: 32
	// number of partitions of 10000 is: 36167251325636293988820471890953695495016030339315650422081868605887952568754066420592310556052906916435144,
	// time: 292.7603ms, length: 107
	// number of partitions of 100000 is: 27493510569775696512677516320986352688173429315980054758203125984302147328114964173055050741660736621590157844774296248940493063070200461792764493033510116079342457190155718943509725312466108452006369558934464248716828789832182345009262853831404597021307130674510624419227311238999702284408609370935531629697851569569892196108480158600569421098519,
	// time: 21.6719118s, length: 347
	// number of partitions of 1000000 is: 1471684986358223398631004760609895943484030484439142125334612747351666117418918618276330148873983597555842015374130600288095929387347128232270327849578001932784396072064228659048713020170971840761025676479860846908142829356706929785991290519899445490672219997823452874982974022288229850136767566294781887494687879003824699988197729200632068668735996662273816798266213482417208446631027428001918132198177180646511234542595026728424452592296781193448139994664730105742564359154794989181485285351370551399476719981691459022015599101959601417474075715430750022184895815209339012481734469448319323280150665384042994054179587751761294916248142479998802936507195257074485047571662771763903391442495113823298195263008336489826045837712202455304996382144601028531832004519046591968302787537418118486000612016852593542741980215046267245473237321845833427512524227465399130174076941280847400831542217999286071108336303316298289102444649696805395416791875480010852636774022023128467646919775022348562520747741843343657801534130704761975530375169707999287040285677841619347472368171772154046664303121315630003467104673818,
	// time: 16m24.4882895s, length: 1108
	// runtime: goroutine stack exceeds 1000000000-byte limit

}
